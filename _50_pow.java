// Generated by chatGPT to overcome corner cases like
// x = 2.00000 and n = -2147483648
class Solution {
    public double myPow(double x, int n) {
        if (n == 0) {
            return 1.0;
        }
        if (n < 0) {
            x = 1 / x;
            if (n == Integer.MIN_VALUE) {
                long absN = (long) n * -1;
                absN /= 2;
                return myPow(x * x, (int) absN);
            }
            n = -n;
        }
        // The key is for b^n, if n%2==0, 
        // b^n = (b^(n/2))^2 = (b^2)^(n/2), base double;
        // if n%2!=0, b^n = b*(b^(n-1))
        double result = 1;
        while (n > 0) {
            if (n % 2 == 1) {
                result *= x;
            }
            x *= x;
            n /= 2;
        }
        return result;
    }
}
